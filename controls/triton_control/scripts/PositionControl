#!/usr/bin/env python3

import math
from operator import ge
from re import A
import numpy
import rospy
import tf.transformations as trans
from pid_controller import PID
from std_msgs.msg import Float32, Float64
from dynamic_reconfigure.server import Server
from triton_control.cfg import PIDparamsConfig
import geometry_msgs.msg as geometry_msgs
from nav_msgs.msg import Odometry
from rospy.numpy_msg import numpy_msg

class PositionControllerNode:
    def __init__(self):
        print('PositionControllerNode: initializing node')

        self.config = {}

        self.pos_des = numpy.zeros(3)
        self.quat_des = numpy.array([0, 0, 0, 1])
        self.P_l = 1.0
        self.I_l = self.D_l = 0.0
        self.P_r = 1.0
        self.I_r = self.D_r = 0.0
        self.initialized = False
        # Initialize pids with default parameters

        # ROS infrastructure
        self.sub_cmd_pose = rospy.Subscriber('cmd_pose', numpy_msg(geometry_msgs.Pose), self.cmd_pose_callback)
        self.sub_odometry = rospy.Subscriber('odom', numpy_msg(geometry_msgs.PoseStamped), self.odometry_callback)
        self.pub_cmd_thrust = rospy.Publisher('thruster_manager/input', geometry_msgs.Wrench, queue_size=10)
        self.srv_reconfigure = Server(PIDparamsConfig, self.config_callback)
        self.c = rospy.Publisher('control_signal', numpy_msg(geometry_msgs.Vector3), queue_size=10)
        rospy.Subscriber('PID_gains_l', numpy_msg(geometry_msgs.Vector3), self.gains_l_callback)
        rospy.Subscriber('PID_gains_a', numpy_msg(geometry_msgs.Vector3), self.gains_r_callback)

    def gains_l_callback(self, msg):
        
        self.P_l = msg.x
        self.I_l = msg.y
        self.D_l = msg.z

    def gains_r_callback(self, msg):
        
        self.P_r = msg.x
        self.I_r = msg.y
        self.D_r = msg.z

    def cmd_pose_callback(self, msg):
        """Handle updated set pose callback."""
        # Just store the desired pose. The actual control runs on odometry callbacks
        p = msg.position
        q = msg.orientation
        self.pos_des = numpy.array([p.x, p.y, p.z])
        self.quat_des = numpy.array([q.x, q.y, q.z, q.w])

    def odometry_callback(self, msg):
        """Handle updated measured velocity callback."""
        
        if not bool(self.config):
            return

        p = msg.pose.position
        q = msg.pose.orientation
        p = numpy.array([p.x, p.y, p.z])
        q = numpy.array([q.x, q.y, q.z, q.w])

        if not self.initialized:
            # If this is the first callback: Store and hold latest pose.
            self.pos_des  = p
            self.quat_des = q
            self.initialized = True

        # Compute control output:
        t = msg.header.stamp.to_sec()

        # Position error
        e_pos_world = self.pos_des - p
        e_pos_body = trans.quaternion_matrix(q).transpose()[0:3,0:3].dot(e_pos_world)
        
        # Error quaternion wrt body frame
        e_rot_quat = trans.quaternion_multiply(trans.quaternion_conjugate(q), self.quat_des)

        if numpy.linalg.norm(e_pos_world[0:2]) > 5.0:
            # special case if we are far away from goal:
            # ignore desired heading, look towards goal position
            heading = math.atan2(e_pos_world[1],e_pos_world[0])
            quat_des = numpy.array([0, 0, math.sin(0.5*heading), math.cos(0.5*heading)])
            e_rot_quat = trans.quaternion_multiply(trans.quaternion_conjugate(q), quat_des)

        # Error angles
        e_rot = numpy.array(trans.euler_from_quaternion(e_rot_quat))

        self.pid_rot = PID.PIDRegulator(self.P_r * 10 , self.I_r * 10, self.D_r * 10, 1)
        self.pid_pos = PID.PIDRegulator(self.P_l * 10 , self.I_l * 10, self.D_l * 10, 1)

        A = geometry_msgs.Vector3()
        th_linear = self.pid_pos.regulate(e_pos_body, t)
        th_angular = self.pid_rot.regulate(e_rot, t)
        A.x = numpy.linalg.norm(th_linear)
        A.y = numpy.linalg.norm(th_angular)
        A.z = 0.0

        self.c.publish(A)

        # Convert and publish vel. command:
        cmd_thrust = geometry_msgs.Wrench()
        cmd_thrust.force = geometry_msgs.Vector3(*th_linear)
        cmd_thrust.torque = geometry_msgs.Vector3(*th_angular)
        self.pub_cmd_thrust.publish(cmd_thrust)

    def config_callback(self, config, level):
        """Handle updated configuration values."""
        # Config has changed, reset PID controllers
        self.pid_pos = PID.PIDRegulator(config['pos_p'], config['pos_i'], config['pos_d'], config['pos_sat'])
        self.pid_rot = PID.PIDRegulator(config['rot_p'], config['rot_i'], config['rot_d'], config['rot_sat'])

        self.config = config

        return config


if __name__ == '__main__':
    print('starting PositionControl')
    rospy.init_node('position_control')

    try:
        node = PositionControllerNode()
        rospy.spin()
    except rospy.ROSInterruptException:
        print('caught exception')
    print('exiting')

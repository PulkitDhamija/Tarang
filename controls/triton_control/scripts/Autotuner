
import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'

from tensorflow.python.util.tf_export import get_v2_constants
import rospy
import numpy as np
import tensorflow as tf 
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.losses import MeanSquaredError 
from tensorflow.keras.optimizers import Adam
from rospy.numpy_msg import numpy_msg
import geometry_msgs.msg as geometry_msgs 
from std_msgs.msg import Float32 
from collections import deque

model1 = Sequential()
model1.add(Dense(7, activation = "sigmoid", input_dim = 15))
model1.add(Dense(3,activation='sigmoid'))
model1.add(Dense(3,activation='sigmoid'))

model2 = Sequential()
model2.add(Dense(7, activation = 'sigmoid', input_dim = 19))
model2.add(Dense(4, activation = 'sigmoid'))
model2.add(Dense(4, activation = 'sigmoid'))

loss_function = MeanSquaredError()
optimizer = Adam()

model1.compile(optimizer=optimizer,loss=loss_function,metrics=['Accuracy'])
model2.compile(optimizer=optimizer,loss=loss_function,metrics=['Accuracy'])

global g1, g2, g3, g4, g5, g6
g1 = deque()
g2 = deque()
g3 = deque()
g4 = deque()
g5 = deque()
g6 = deque()

class autotuner_node:
    def __init__(self):

        self.config = {}

        self.pos_des = np.zeros(3)
        self.quat_des = np.array([0, 0, 0, 1])
        self.p = np.zeros(3)
        self.q = np.array([0, 0 , 0, 0])
        self.e1 = 0.0
        self.e2 = 0.0
        self.c1 = 0.0
        self.c2 = 0.0
        self.sub_odometry = rospy.Subscriber('odom', numpy_msg(geometry_msgs.PoseStamped), self.odometry_callback)
        rospy.Subscriber('control_signal', geometry_msgs.Vector3, self.c_callback)
        rospy.Subscriber('cmd_pose', numpy_msg(geometry_msgs.Pose), self.cmd_pose_callback)
        self.gains_l = rospy.Publisher('PID_gains_l',numpy_msg(geometry_msgs.Vector3) , queue_size=10)
        self.gains_r = rospy.Publisher('PID_gains_a',numpy_msg(geometry_msgs.Vector3) , queue_size=10 )

    def c_callback(self, msg):
        self.c1 = msg.x
        self.c2 = msg.y
    

    def cmd_pose_callback(self, msg):

        a = msg.position
        b = msg.orientation
        self.pos_des = np.array([a.x, a.y, a.z])
        self.quat_des = np.array([b.x, b.y, b.z, b.w])


    def odometry_callback(self, msg):

        if not bool(self.config):
            return

        a = msg.pose.position
        b = msg.pose.orientation
        self.p = np.array([a.x, a.y, a.z])
        self.q = np.array([b.x, b.y, b.z, b.w])

        self.e1  = loss_function(self.pos_des, self.p).np()
        self.e2 = loss_function(self.quat_des, self.q).np()

        if g1.empty :
                g1.append(self.p)
                g1.append(self.p)
        else :
                g1.popleft()
                g1.append(self.p)
    
        if g2.empty :
                g2.append(self.q)
                g2.append(self.q)
        else :
                g2.popleft()
                g2.append(self.q)

        if g3.empty :
                g3.append(self.c1)
                g3.append(self.c1)
        else :
                g3.popleft()
                g3.append(self.c1)

        if g4.empty :
                g4.append(self.c2)
                g4.append(self.c2)
        else :
                g4.popleft()
                g4.append(self.c2)

        if g5.empty :
                g5.append(self.pos_des)
                g5.append(self.pos_des)
        else :
                g5.popleft()
                g5.append(self.pos_des)

        if g6.empty :
                g6.append(self.quat_des)
                g6.append(self.quat_des)
        else :
                g6.popleft()
                g6.append(self.quat_des)

        temp1 = ([g3[0], g3[1], self.e1])
        ar1 = ([g1[0], g1[1], temp1, g5[0], g5[1]])
        ar2 = [self.e2, g4[0], g4[1], g2[0][0], g2[0][1], g2[0][2], g2[0][3], g2[1][0], g2[1][1], g2[1][2], g2[1][3], g6[0][0], g6[0][1], g6[0][2], g6[0][3], g6[1][0], g6[1][1], g6[1][2], g6[1][3]]

        tensor1 = tf.convert_to_tensor(ar1)
        tensor2 = tf.convert_to_tensor(ar2)

        tensor_l = tf.reshape(tensor1, [1,15])
        tensor_r = tf.reshape(tensor2, [1,19])

        tensor3 = tf.convert_to_tensor(self.pos_des)
        tensor4 = tf.convert_to_tensor(self.quat_des)

        tensor_l1 = tf.reshape(tensor3, [1,3])
        tensor_r1 = tf.reshape(tensor4, [1,4])

        model1.fit(tensor_l, tensor_l1, epochs=100, batch_size=15)
        model2.fit(tensor_r, tensor_r1, epochs=100, batch_size=19)

        LPID_a = model1.predict(tensor_l)
        APID_a = model2.predict(tensor_r)

        linear = geometry_msgs.Vector3()
        linear.x = LPID_a[0]
        linear.y = LPID_a[1]
        linear.z = LPID_a[2]
        self.gains_l.publish(linear)

        angular = geometry_msgs.Vector3()
        angular.x = APID_a[0]
        angular.y = APID_a[1]
        angular.z = APID_a[2]
        self.gains_r.publish(angular)


if __name__ == '__main__':
    print('starting auto_tuner')
    rospy.init_node('autotune')

    try:
        node = autotuner_node()
        rospy.spin()
    except rospy.ROSInterruptException:
        print('caught exception')
    print('exiting')



        




        









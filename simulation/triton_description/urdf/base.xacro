<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">
  <!-- Loading some constants -->
  <xacro:include filename="$(find uuv_descriptions)/urdf/common.urdf.xacro"/>
  <!-- Loading file with sensor macros -->
  <xacro:include filename="$(find uuv_sensor_ros_plugins)/urdf/sensor_snippets.xacro"/>
  <!-- Loading the UUV simulator ROS plugin macros -->
  <xacro:include filename="$(find triton_description)/urdf/snippets.xacro"/>  
  <xacro:include filename="$(find uuv_gazebo_ros_plugins)/urdf/thruster_snippets.xacro"/>
  <xacro:include filename="$(find uuv_gazebo_ros_plugins)/urdf/misc.xacro"/>
  
  <xacro:include filename="$(find triton_description)/urdf/grabber.xacro"/>  
  <!-- Loading vehicle's specific macros -->
  <!-- <xacro:include filename="$(find triton_description)/urdf/snippets.xacro"/> -->

  <!--
    Vehicle's parameters (remember to enter the model parameters below)
  -->

  <xacro:property name="mass" value="49.1509718914694"/>
  <!-- Center of gravity -->
  <xacro:property name="cog" value="0 0 0"/>
  <!-- Update the exact values later -->
  <!-- Fluid density -->
  <xacro:property name="rho" value="1028"/>

  <!--
    Visual mesh file for the vehicle, usually in DAE (Collada) format. Be sure to store the
    mesh with the origin of the mesh on the same position of the center of mass, otherwise
    the mesh pose will have to be corrected below in the <visual> block.
    Open the meshes for the RexROV vehicle in Blender to see an example on the mesh placement.
  -->
  <xacro:property name="visual_mesh_file" value="file://$(find triton_description)/meshes/vehicle.dae"/>

  <!-- Collision geometry mesh, usually in STL format (it is recommended to keep
  this geometry as simple as possible to improve the performance the physics engine
  regarding the computation of collision forces) -->
  <xacro:property name="collision_mesh_file" value="file://$(find triton_description)/meshes/vehicle.stl"/>
  <!-- Vehicle macro -->
  <xacro:macro name="triton_base" params="namespace *gazebo">

      <!-- Dummy Link -->
      <!-- <link name= "${namespace}/dummy">
      </link> -->

      <!-- Rigid body description of the base link -->
      <link name="${namespace}/base_link">
        <!--
          Be careful to setup the coefficients for the inertial tensor,
          otherwise your model will become unstable on Gazebo
        -->
        <inertial>
          <mass value="${mass}" />
          <origin xyz="${cog}" rpy="0 0 0"/>
          <!-- Fake MOI for stability -->
          <inertia ixx="243.39" ixy="1.44" ixz="33.41" iyy="367.20" iyz="2.6" izz="319.23"/>
        </inertial>

        <visual>
          <origin xyz="0 0 0" rpy="0 0 0"/>
          <geometry>
            <mesh filename="${visual_mesh_file}" scale="1 1 1" />
          </geometry>
        </visual>

        <collision>
          <origin xyz="0 0 0" rpy="0 0 0"/>
          <geometry>
            <mesh filename="${collision_mesh_file}" scale="1 1 1" />
          </geometry>
        </collision>
      </link>

      <!-- Dummy joint -->
      <!-- <joint name="dummy_joint" type="fixed">
        <parent link="${namespace}/dummy"/>
        <child link="${namespace}/base_link"/>
      </joint> -->
    
    <gazebo reference="${namespace}/base_link">
      <selfCollide>false</selfCollide>
    </gazebo>

    <!-- Set up hydrodynamic plugin given as input parameter -->
    <xacro:insert_block name="gazebo"/>

    <!-- Include the thruster modules -->
    <xacro:include filename="$(find triton_description)/urdf/actuators.xacro"/>

    <!-- Include the sensor modules -->
    <xacro:include filename="$(find triton_description)/urdf/sensors.xacro"/>

    <xacro:grabber_macro robot_namespace="${namespace}">
    <origin xyz="-0.099498 0.11742 -0.013727" rpy="0 0 0"/>
    </xacro:grabber_macro>

  </xacro:macro>

</robot>
